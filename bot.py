import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Render)
TOKEN = os.environ.get("API_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID"))
GROUP_ID = -1002640250280  # –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
EXTRA_GROUP_ID = -1002011191845  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞, –∫—É–¥–∞ —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∫–∞

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã (–Ω—É–º–µ—Ä—É—é—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ConversationHandler)
READY, NICKNAME, PLAYER_ID, AGE, GENDER, KD_CURRENT, MATCHES_CURRENT, SCREENSHOT_1, KD_PREVIOUS, MATCHES_PREVIOUS, SCREENSHOT_2 = range(11)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMINS = [
    "@DektrianTV - –õ–∏–¥–µ—Ä –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤",
    "@Ffllooffy - –ó–∞–º –û—Å–Ω–æ–≤—ã –∏ –õ–∏–¥–µ—Ä –ï—Å–ø–æ—Ä—Ç—Å",
    "@RinaSergeevna - –ó–∞–º –û—Å–Ω–æ–≤—ã",
    "@FRUKTIK58 - –ó–∞–º –û—Å–Ω–æ–≤—ã",
    "@HEADTRICK2 - –ó–∞–º –ï—Å–ø–æ—Ä—Ç—Å",
    "@neverforgotme - –õ–∏–¥–µ—Ä –ê–∫–∞–¥–µ–º–∫–∏",
    "@Vasvyu6 - –ó–∞–º –ê–∫–∞–¥–µ–º–∫–∏",
    "@kinderskayad - –ó–∞–º –ê–∫–∞–¥–µ–º–∫–∏"
]

# –ö–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" –∏ "–°–Ω–∞—á–∞–ª–∞"
def get_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu'),
         InlineKeyboardButton("–°–Ω–∞—á–∞–ª–∞", callback_data='reset_button')]
    ])

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def get_menu_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö—Ä–∏—Ç–µ—Ä–∏–∏", callback_data='criteria_button')],
        [InlineKeyboardButton("–ê–¥–º–∏–Ω—ã", callback_data='admins_button')],
        [InlineKeyboardButton("–°–æ—Ü—Å–µ—Ç–∏", callback_data='socials_button')],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='back_button')]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã
async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_photo(
        photo="https://ibb.co/JRbbTWsQ",
        caption=" "
    )
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç –∫–ª–∞–Ω–∞ DEKTRIAN FAMILY!\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞–Ω–æ–≤:\n\n"
        "‚ñ´Ô∏è FAMILY ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–Ω\n"
        "‚ñ´Ô∏è ESPORTS ‚Äî –∫–ª–∞–Ω –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–æ–≤\n"
        "‚ñ´Ô∏è ACADEMY ‚Äî –∫–ª–∞–Ω —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å—Ç–∏–ª—è\n\n"
        "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º '–¥–∞' –∏ –ø—Ä–æ—Ö–æ–¥–∏ –∞–Ω–∫–µ—Ç—É üìù\n\n",
        reply_markup=get_buttons()
    )
    return READY

# –û—Ç–≤–µ—Ç –Ω–∞ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"
async def ready(update: Update, context: CallbackContext) -> int:
    text = update.message.text.lower()
    if text == "–¥–∞":
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.", reply_markup=get_buttons())
        return NICKNAME
    elif text == "–Ω–µ—Ç":
        await update.message.reply_text("–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ '–¥–∞'.", reply_markup=get_buttons())
        return READY
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.", reply_markup=get_buttons())
        return READY

# –®–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã ‚Äî –∑–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def nickname(update: Update, context: CallbackContext) -> int:
    context.user_data["nickname"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∞–π–¥–∏.", reply_markup=get_buttons())
    return PLAYER_ID

async def player_id(update: Update, context: CallbackContext) -> int:
    context.user_data["player_id"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?", reply_markup=get_buttons())
    return AGE

async def age(update: Update, context: CallbackContext) -> int:
    context.user_data["age"] = update.message.text
    await update.message.reply_text("–¢—ã –¥–µ–≤–æ—á–∫–∞ –∏–ª–∏ –ø–∞—Ä–µ–Ω—å?", reply_markup=get_buttons())
    return GENDER

async def gender(update: Update, context: CallbackContext) -> int:
    context.user_data["gender"] = update.message.text.lower()
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –ö–î –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω?", reply_markup=get_buttons())
    return KD_CURRENT

async def kd_current(update: Update, context: CallbackContext) -> int:
    context.user_data["kd_current"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π —Ç—ã —Å—ã–≥—Ä–∞–ª –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ?", reply_markup=get_buttons())
    return MATCHES_CURRENT

async def matches_current(update: Update, context: CallbackContext) -> int:
    context.user_data["matches_current"] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω.", reply_markup=get_buttons())
    return SCREENSHOT_1

async def screenshot_1(update: Update, context: CallbackContext) -> int:
    if update.message.photo:
        context.user_data["screenshot_1"] = update.message.photo[-1].file_id
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ö–î –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω.", reply_markup=get_buttons())
        return KD_PREVIOUS
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
    return SCREENSHOT_1

async def kd_previous(update: Update, context: CallbackContext) -> int:
    context.user_data["kd_previous"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π —Ç—ã —Å—ã–≥—Ä–∞–ª –≤ –ø—Ä–æ—à–ª–æ–º —Å–µ–∑–æ–Ω–µ?", reply_markup=get_buttons())
    return MATCHES_PREVIOUS

async def matches_previous(update: Update, context: CallbackContext) -> int:
    context.user_data["matches_previous"] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω.", reply_markup=get_buttons())
    return SCREENSHOT_2

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ ‚Äî —Å–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 3 —á–∞—Ç–∞
async def screenshot_2(update: Update, context: CallbackContext) -> int:
    if update.message.photo:
        context.user_data["screenshot_2"] = update.message.photo[-1].file_id
        u = update.message.from_user

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç—ã
        msg = (
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω DEKTRIAN FAMILY:\n"
            f"–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {context.user_data['nickname']}\n"
            f"–ò–≥—Ä–æ–≤–æ–π –∞–π–¥–∏: {context.user_data['player_id']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
            f"–ü–æ–ª: {context.user_data['gender']}\n"
            f"–ö–î –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {context.user_data['kd_current']}\n"
            f"–ú–∞—Ç—á–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ: {context.user_data['matches_current']}\n"
            f"–ö–î –∑–∞ –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω: {context.user_data['kd_previous']}\n"
            f"–ú–∞—Ç—á–∏ –≤ –ø—Ä–æ—à–ª–æ–º —Å–µ–∑–æ–Ω–µ: {context.user_data['matches_previous']}\n"
            f"Telegram Username: @{u.username}\n"
            f"Telegram UserID: {u.id}\n"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await context.bot.send_message(ADMIN_ID, msg)
            await context.bot.send_photo(ADMIN_ID, context.user_data['screenshot_1'])
            await context.bot.send_photo(ADMIN_ID, context.user_data['screenshot_2'])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
            await context.bot.send_message(GROUP_ID, msg)
            await context.bot.send_photo(GROUP_ID, context.user_data['screenshot_1'])
            await context.bot.send_photo(GROUP_ID, context.user_data['screenshot_2'])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É
            await context.bot.send_message(EXTRA_GROUP_ID, msg)
            await context.bot.send_photo(EXTRA_GROUP_ID, context.user_data['screenshot_1'])
            await context.bot.send_photo(EXTRA_GROUP_ID, context.user_data['screenshot_2'])

        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!", reply_markup=get_buttons())
        return ConversationHandler.END

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
    return SCREENSHOT_2

# –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
async def reset(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.message.edit_text("–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã! –ù–∞–ø–∏—à–∏ –¥–∞ –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=get_buttons())                 
    return READY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == 'reset_button':
        return await reset(update, context)
    elif query.data == 'menu':
        await query.message.edit_reply_markup(reply_markup=get_menu_buttons())
    elif query.data == 'back_button':
        await query.message.edit_reply_markup(reply_markup=get_buttons())
    elif query.data == 'criteria_button':
        await query.message.edit_text(
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–ª–∞–Ω–∞ DEKTRIAN FAMILY:\n"
            "1. –°–º–µ–Ω–∞ —Ç–µ–≥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.\n"
            "2. –ö–¥ –Ω–∞ 100 –º–∞—Ç—á–µ–π (–î–µ–≤—É—à–∫–∏ - 4; –ú—É–∂—á–∏–Ω—ã - 5)\n"
            "3. –í–æ–∑—Ä–∞—Å—Ç 16+.\n"
            "4. –ê–∫—Ç–∏–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç–µ.\n"
            "5. –£—á–∞—Å—Ç–∏–µ –Ω–∞ —Å—Ç—Ä–∏–º–∞—Ö –õ–∏–¥–µ—Ä–∞ –∏ –∫–ª–∞–Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.\n\n"
            "_________________________________\n"
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–ª–∞–Ω–∞ DEKTRIAN ACADEMY:\n"
            "1. –°–º–µ–Ω–∞ —Ç–µ–≥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.\n"
            "2. –ö–¥ –∏ –º–∞—Ç—á–∏ –Ω–µ –≤–∞–∂–Ω—ã.\n"
            "3. –í–æ–∑—Ä–∞—Å—Ç 14+.\n"
            "4. –ê–∫—Ç–∏–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç–µ.\n"
            "5. –£—á–∞—Å—Ç–∏–µ –Ω–∞ —Å—Ç—Ä–∏–º–∞—Ö –õ–∏–¥–µ—Ä–∞ –∏ –∫–ª–∞–Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.\n\n"
            "_________________________________\n"
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–ª–∞–Ω–∞ DEKTRIAN ESPORTS:\n"
            "1. –°–º–µ–Ω–∞ —Ç–µ–≥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.\n"
            "2. –í–æ–∑—Ä–∞—Å—Ç 16+\n"
            "3. –ù–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ö–∞–π–ª–∞–π—Ç–æ–≤\n"
            "4. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –æ—Ç–¥–∞–µ—Ç—Å—è —Å–æ–±—Ä–∞–Ω–Ω—ã–º –ø–∞–∫–∞–º\n",
            reply_markup=get_menu_buttons()
        )
    elif query.data == 'admins_button':
        await query.message.edit_text("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join(ADMINS), reply_markup=get_menu_buttons())
    elif query.data == 'socials_button':
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("YouTube", url="https://www.youtube.com/@Dektrian_TV")],
            [InlineKeyboardButton("Twitch", url="https://www.twitch.tv/dektrian_tv")],
            [InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ Telegram", url="https://t.me/dektrian_tv")],
            [InlineKeyboardButton("–ö–∞–Ω–∞–ª Telegram", url="https://t.me/dektrian_family")],
            [InlineKeyboardButton("TikTok", url="https://www.tiktok.com/@dektrian_tv")],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='back_button')]
        ]))

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            READY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ready), CallbackQueryHandler(button_callback)],
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nickname), CallbackQueryHandler(button_callback)],
            PLAYER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, player_id), CallbackQueryHandler(button_callback)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age), CallbackQueryHandler(button_callback)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender), CallbackQueryHandler(button_callback)],
            KD_CURRENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, kd_current), CallbackQueryHandler(button_callback)],
            MATCHES_CURRENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, matches_current), CallbackQueryHandler(button_callback)],
            SCREENSHOT_1: [MessageHandler(filters.PHOTO, screenshot_1), CallbackQueryHandler(button_callback)],
            KD_PREVIOUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, kd_previous), CallbackQueryHandler(button_callback)],
            MATCHES_PREVIOUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, matches_previous), CallbackQueryHandler(button_callback)],
            SCREENSHOT_2: [MessageHandler(filters.PHOTO, screenshot_2), CallbackQueryHandler(button_callback)],
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_callback))

    port = int(os.environ.get("PORT", 10000))
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://clan-bot-2-1.onrender.com/{TOKEN}",
    )

if __name__ == "__main__":
    main()
